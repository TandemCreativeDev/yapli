// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  chatrooms     Chatroom[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Chatroom {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  roomUrl   String?   @unique
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  messages  Message[]

  @@unique([title, userId], name: "unique_title_per_user")
  @@map("chatrooms")
}

model Message {
  id           String        @id @default(uuid())
  alias        String
  message      String
  timestamp    DateTime      @default(now())
  chatroomId   String
  linkPreviews LinkPreview[]
  chatroom     Chatroom      @relation(fields: [chatroomId], references: [id])

  @@map("messages")
}

model LinkPreview {
  id          String   @id @default(uuid())
  messageId   String
  url         String
  title       String?
  description String?
  imageUrl    String?
  siteName    String?
  favicon     String?
  domain      String?
  createdAt   DateTime @default(now())
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("link_previews")
}
